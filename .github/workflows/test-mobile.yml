name: Mobile App Tests

on:
  pull_request:
    paths:
      - 'apps/mobile/**'
      - '.github/workflows/test-mobile.yml'
  push:
    branches: [main]
    paths:
      - 'apps/mobile/**'
      - '.github/workflows/test-mobile.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/mobile/package-lock.json

      - name: Install dependencies
        working-directory: apps/mobile
        run: npm ci

      - name: Run TypeScript type checking
        working-directory: apps/mobile
        run: npm run typecheck

      - name: Run ESLint
        working-directory: apps/mobile
        run: npm run lint

      - name: Run unit tests
        working-directory: apps/mobile
        run: npm run test -- --coverage --watchAll=false --maxWorkers=2

      - name: Check coverage thresholds
        working-directory: apps/mobile
        run: npm run test:coverage-check

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: apps/mobile/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          title: Mobile App Coverage Report

  e2e-tests-ios:
    name: E2E Tests (iOS)
    runs-on: macos-latest
    timeout-minutes: 45
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'test-e2e')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/mobile/package-lock.json

      - name: Install dependencies
        working-directory: apps/mobile
        run: npm ci

      - name: Setup iOS Simulator
        run: |
          xcrun simctl list devicetypes
          xcrun simctl create "iPhone15Test" "iPhone 15" | xargs xcrun simctl boot

      - name: Install iOS dependencies
        working-directory: apps/mobile
        run: |
          cd ios && pod install --repo-update && cd ..

      - name: Build iOS app for testing
        working-directory: apps/mobile
        run: npm run test:e2e:build -- --configuration ios.sim.debug

      - name: Run E2E tests
        working-directory: apps/mobile
        run: npm run test:e2e -- --configuration ios.sim.debug --cleanup

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-ios
          path: |
            apps/mobile/e2e/artifacts/
            apps/mobile/e2e/test-results/

  e2e-tests-android:
    name: E2E Tests (Android)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'test-e2e')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/mobile/package-lock.json

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Install dependencies
        working-directory: apps/mobile
        run: npm ci

      - name: Enable KVM group permissions
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Create Android Emulator
        run: |
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install 'system-images;android-30;google_apis;x86_64'
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd --force --name test_emulator --abi google_apis/x86_64 --package 'system-images;android-30;google_apis;x86_64'

      - name: Start Android Emulator
        run: |
          $ANDROID_HOME/emulator/emulator -avd test_emulator -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

      - name: Build Android app for testing
        working-directory: apps/mobile
        run: npm run test:e2e:build -- --configuration android.emu.debug

      - name: Run E2E tests
        working-directory: apps/mobile
        run: npm run test:e2e -- --configuration android.emu.debug --cleanup

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-android
          path: |
            apps/mobile/e2e/artifacts/
            apps/mobile/e2e/test-results/

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/mobile/package-lock.json

      - name: Install dependencies
        working-directory: apps/mobile
        run: npm ci

      - name: Verify Expo configuration
        working-directory: apps/mobile
        run: npx expo config --json > /dev/null

      - name: Check for TypeScript errors
        working-directory: apps/mobile
        run: npm run typecheck

      - name: Verify app can start (dry run)
        working-directory: apps/mobile
        run: timeout 30s npx expo start --no-dev --minify || exit 0

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/mobile/package-lock.json

      - name: Install dependencies
        working-directory: apps/mobile
        run: npm ci

      - name: Run npm audit
        working-directory: apps/mobile
        run: npm audit --audit-level moderate

      - name: Check for sensitive files
        run: |
          # Check for potential sensitive files
          find apps/mobile -name "*.env*" -not -name "*.example" | grep -v node_modules || true
          find apps/mobile -name "*key*" -not -path "*/node_modules/*" | grep -E "\.(pem|p12|jks)$" || true
          find apps/mobile -name "*secret*" -not -path "*/node_modules/*" | grep -v ".test." || true

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/mobile/package-lock.json

      - name: Install dependencies
        working-directory: apps/mobile
        run: npm ci

      - name: Analyze bundle size
        working-directory: apps/mobile
        run: |
          # Create a production build analysis
          npx expo export --dump-sourcemap --platform ios > bundle-analysis.txt || true
          npx expo export --dump-sourcemap --platform android >> bundle-analysis.txt || true

      - name: Check for large dependencies
        working-directory: apps/mobile
        run: |
          # List packages by size
          npx bundlesize-analyzer node_modules > dependency-sizes.txt || true
          cat dependency-sizes.txt | head -20 || true

      - name: Upload performance reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            apps/mobile/bundle-analysis.txt
            apps/mobile/dependency-sizes.txt

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, build-verification, security-scan, performance-check]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Build Verification: ${{ needs.build-verification.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Performance Check: ${{ needs.performance-check.result }}"

          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi

          if [[ "${{ needs.build-verification.result }}" != "success" ]]; then
            echo "❌ Build verification failed"
            exit 1
          fi

          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "⚠️ Security scan failed"
            # Don't fail the build for security scan, but warn
          fi

          if [[ "${{ needs.performance-check.result }}" != "success" ]]; then
            echo "⚠️ Performance check failed"
            # Don't fail the build for performance check, but warn
          fi

          echo "✅ All critical tests passed!"

      - name: Comment test summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              unitTests: '${{ needs.unit-tests.result }}',
              buildVerification: '${{ needs.build-verification.result }}',
              securityScan: '${{ needs.security-scan.result }}',
              performanceCheck: '${{ needs.performance-check.result }}'
            };

            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                default: return '⚠️';
              }
            };

            const summary = `
            ## 📱 Mobile App Test Results

            | Test Suite | Result |
            |------------|--------|
            | Unit & Integration Tests | ${getEmoji(results.unitTests)} ${results.unitTests} |
            | Build Verification | ${getEmoji(results.buildVerification)} ${results.buildVerification} |
            | Security Scan | ${getEmoji(results.securityScan)} ${results.securityScan} |
            | Performance Check | ${getEmoji(results.performanceCheck)} ${results.performanceCheck} |

            ${results.unitTests === 'success' && results.buildVerification === 'success'
              ? '🎉 All critical tests passed!'
              : '⚠️ Some tests failed. Please check the logs above.'}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });